# Copyright 2022 Amazon.com and its affiliates; all rights reserved. 
# This file is Amazon Web Services Content and may not be duplicated or distributed without permission.
AWSTemplateFormatVersion: "2010-09-09"
Description: Reference Quest

Parameters:
  # These parameters are supplied by the Quests API when this template is deployed 
  DeployAssetsBucket:
    # Default: ee-assets-prod-us-east-1
    Description: The name of the S3 bucket where assets are stored
    Type: String
  DeployAssetsKeyPrefix:
    # Default: modules/9c0e89820b864addaed45ec2f5440379/v5/
    Description: S3 key prefix where assets are stored
    Type: String

  # Additional parameters required by this template
  QuestId:
    Default: 4a841f49-25c9-43c2-bf9d-da2b97142027
    Description: The ID assigned to this quest
    Type: String

  TeamLambdaSourceKey:
    Default: gdQuests-team-lambda-source.zip
    Description: S3 key for the Lamda source code used by the team account for the Quest
    Type: String
  StaticAssetsBucket:
    Type: String
    Description: (Optional) Bucket for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''
  StaticAssetsKeyPrefix:
    Type: String
    Description: (Optional) Bucket prefix for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''


Mappings:
  AWSRegionAMI:
    us-east-1:
      HVM64: ami-090fa75af13c156b4
    us-east-2:
      HVM64: ami-051dfed8f67f095f5   
    us-west-1:
      HVM64: ami-0e4d9ed95865f3b40
    us-west-2:
      HVM64: ami-0cea098ed2ac54925
    eu-west-1:
      HVM64: ami-089950bc622d39ed8
    eu-west-2:
      HVM64: ami-0e34bbddc66def5ac
    eu-central-1:
      HVM64: ami-0c956e207f9d113d5


Resources: 
  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ AWS GameDay Quests - Team Enable Resources                                                                                                               ║
  # ╠═══════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ LambdaRole            │ AWS::IAM::Role              │ Execution role for the resource lookup Lambda                                                      ║
  # ║ ResourceLookupLambda  │ AWS::Lambda::Function       │ Lambda Function that looks up default resources in the account                                     ║
  # ║ ResourceLookup        │ Custom::ResourceLookup      │ Custom provisioning logic invoking the Resource Lookup                                             ║
  # ║ WebAppOnEC2           │ AWS::EC2::Instance          │ An EC2 instance that runs a simple Apache Web App                                                  ║
  # ║ PublicSecurityGroup   │ AWS::EC2::SecurityGroup     │ The security group added to WebAppOnEC2                                                            ║
  # ║ DeveloperUser         │ AWS::IAM::User              │ The IAM user pretended to be compromised                                                           ║
  # ║ AccessKeys            │ AWS::IAM::AccessKey         │ The "compromised" access key for DeveloperUser                                                     ║
  # ╚═══════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════════════╝

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for internally-invoked Lambda resources
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: "*"
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            Resource: "*"

  ResourceLookupLambda:
    Type: AWS::Lambda::Function
    Description: Lookup resources
    Properties:
      Handler: "resource_lookup.lambda_handler"
      Runtime: python3.9
      Timeout: '30'
      Code:
        S3Bucket: !Ref DeployAssetsBucket
        S3Key: !Join
          - ''
          - - !Ref DeployAssetsKeyPrefix
            - !Ref TeamLambdaSourceKey
      Role: !GetAtt LambdaRole.Arn

  ResourceLookup:
    Type: Custom::ResourceLookup
    Properties:
      ServiceToken: !GetAtt ResourceLookupLambda.Arn

  # Creating the VPC
  3TierVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - '-3TierVPC'

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref '3TierVPC'

   # Creating an Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: '3TierVPC'

  # InternetGatewayAttachment to VPC
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref '3TierVPC'
      InternetGatewayId: !Ref InternetGateway

  # Create Public Subnet One
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref '3TierVPC'
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true

  # Create Public Subnet Two
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref '3TierVPC'
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.16.0/20
      MapPublicIpOnLaunch: true

  # Create VPC Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref '3TierVPC'

  # Create PublicRoute
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: 'InternetGateway'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet One 
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Associate Public Subnet Two
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Create Security Group
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SecurityGroup-07
      GroupDescription: Open HTTP (port 80) and SSH (port 22)
      VpcId: !Ref '3TierVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Create Launch Template
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-wp-launchTemplate4ASG'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups:
              - !Ref InstanceSecurityGroup
        ImageId: ami-0022f774911c1d690
        InstanceType: t3a.small
        UserData: !Base64 
          'Fn::Sub': |
            #!/bin/bash -xe
            yum -y update
            yum install -y httpd wget git
            cd /tmp
            availabilityZone=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            git clone https://github.com/glendont/aws-multi-region-web.git
            cp ./aws-multi-region-web/gameday-web/* /var/www/html
            cd /var/www/html
            echo "Availability Zone: $availabilityZone </span>" >> index.html 
            cat second-half.html >> index.html
            cd /tmp
            usermod -a -G apache ec2-user   
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;
            systemctl enable httpd
            systemctl start httpd
        #KeyName: "oneclick"
        # SecurityGroupIds:
        #   - !Ref InstanceSecurityGroup
        # VpcId: !Ref 3TierVPC
        # SubnetId: !Ref PrivateSubnet1        

  # Create AutoScaling Group
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref "ELBTargetGroup"


  # Create a Scaling Policy
  ScalingPolicy07:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'

  # Create Private Subnet One for App
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref '3TierVPC'
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.32.0/20
      MapPublicIpOnLaunch: false

  # Create Private Subnet Two for App
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref '3TierVPC'
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.48.0/20
      MapPublicIpOnLaunch: false

  # Create Private Subnet Three for DB
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref '3TierVPC'
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.64.0/20
      MapPublicIpOnLaunch: false

  # Create Private Subnet Four for DB
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref '3TierVPC'
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.80.0/20
      MapPublicIpOnLaunch: false

 # Create Private Route Table
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref '3TierVPC'

  # Create PrivateRoute
  # PrivateRoute2:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable2
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  # Associate Private Subnet One
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet1

  # Associate Private Subnet Two
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Create AutoScaling Group
  AutoScalingGroup2:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      MetricsCollection:
        - Granularity: 1Minute

  # Create a Scaling Policy
  ScalingPolicy02:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'

  # Create Security Group
  InstanceSecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: SecurityGroup-08
      GroupDescription: Open HTTP (port 80) and SSH (port 22)
      VpcId: !Ref '3TierVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0


  ####### Elastic Load Balancers #######
  # Create Security Group for ELB
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: ELBSecurityGroup
      GroupDescription: Open HTTP (port 80) and HTTPS (port 443)
      VpcId: !Ref '3TierVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Create Application Load Balancer
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: 'InternetGateway'
    Properties: 
      IpAddressType: ipv4
      # LoadBalancerAttributes: 
      #   - LoadBalancerAttribute
      Name: ElasticLoadBalancer
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref "ELBSecurityGroup"
      # SubnetMappings: 
      #   - SubnetId: !Ref "PublicSubnet1"
      #   - SubnetId: !Ref "PublicSubnet2"
      Subnets: 
        - !Ref "PublicSubnet1"
        - !Ref "PublicSubnet2"
      # Tags: 
      #   - Tag
      Type: application

  # Target Group
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: "/"
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Name: TargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref "3TierVPC"

  # ELB Listener
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref "ELBTargetGroup"
      LoadBalancerArn: !Ref "ElasticLoadBalancer" 
      Port: '80'
      Protocol: HTTP

  # S3
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub gameday-cloudfront-logs-${AWS::AccountId}-${AWS::Region}

  # WAF
  WebApplicationFirewall:
    Type: AWS::WAFv2::WebACL
    Properties: 
      Description: Web ACL for Cloudfront
      Name: waf-web-acl
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig: 
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: ExampleWebACLMetric

  # SNS Topic
  SNS:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: SNS For Cloudwatch alarm
      TopicName: SNS-topic-for-cloudwatch-alarm

  # CloudFront
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: www.amazon.com
          Id: defaultOrigin
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: defaultOrigin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: all
          ViewerProtocolPolicy: allow-all


Outputs:
  # This section modifies the team's TeamRole IAM role to restrict the listed actions on the specified resources.
  # The purpose is to avoid that a team cheats by picking into or execute resources they shouldn't be able to manipulate
  QuestsResourceLocks:
    Description: A JSON object that defines what IAM actions to restrict as a result of deploying this template
    Value: !Sub |-
      [
        {
          "Actions": [
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:PublishVersion",
            "lambda:RemovePermission",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:UpdateFunctionUrlConfig",
            "lambda:UpdateFunctionEventInvokeConfig"
          ],
          "Resources": [
            "${ResourceLookupLambda.Arn}"
          ]
        }
      ]

  ElasticLoadBalancerDNSname:
    Description: DNS name of this load balancer.
    Value: !GetAtt ElasticLoadBalancer.DNSName

  CloudFrontID:
    Description: CloudFront ID
    Value: !GetAtt CloudFrontDistribution.Id
  
  WAFWebACLID:
    Description: WAF Web ACL ID
    Value: !GetAtt WebApplicationFirewall.Id
